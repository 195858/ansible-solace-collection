# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke, <ricardo.gomez-ulmke@solace.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

name: integration tests
on:
  # for testing
  workflow_dispatch:

  schedule:
    # - cron: '0 5 * * THU'
    - cron: '0 5 * * *'
  pull_request:
    branches:
      - main
env:
  DEBUG_FLAG: ${{ true }}
  TEST_ANSIBLE_SOLACE_COLLECTION_DIR: "src/ansible_collections/solace/pubsub_plus"
  TEST_TEST_RUNNER_SCRIPT: "test-runner/run.integration.sh"
  TEST_TEST_RUNNER_LOGS_NAME: test-runner-integration-logs
  TEST_RUNNER_LOGS_DIR: integration-logs

jobs:
  integration_test:

    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [ '3.6' ]
        # python-version: [ '3.6', '3.8', '3.9' ]
        ansible-version: [ 'ansible>=2.10.3' ]
        # ansible-version: [ 'ansible>=2.9.11,<2.10.0', 'ansible>=2.10.3' ]
        # ansible-version: [ 'ansible>=2.9.11,<2.10.0' ]

    steps:

      - name: Check Auth
        if: github.event_name == 'workflow_dispatch' && github.actor != 'ricardojosegomezulmke'
        run: |
          echo "not authorized"
          echo '::set-output name=IS_AUTHORIZED::false'
        id: auth
      - name: Cancel Workflow
        if: ${{ always() && steps.auth.outputs.IS_AUTHORIZED == 'false' }}
        uses: andymckay/cancel-action@0.2

      - name: Print test env
        if: env.DEBUG_FLAG == 'true'
        run: |
          env | grep TEST

      - name: Print github env before checkout
        if: env.DEBUG_FLAG == 'true'
        run: |
          pwd
          # echo "GITHUB_SHA=$GITHUB_SHA"
          echo "GITHUB_REPOSITORY=$GITHUB_REPOSITORY"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "GITHUB_REF=$GITHUB_REF"
          echo "github.event=${{ toJson(github.event) }}"
          echo "github.event_name=${{ github.event_name }}"

      - name: Checkout Current Branch
        uses: actions/checkout@master
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Print Python Version
        if: env.DEBUG_FLAG == 'true'
        run: |
          python -V

      - name: Install ansible and collection dependencies
        env:
          ANSIBLE_VERSION: "${{ matrix.ansible-version }}"
        run: |
          python -m pip install --upgrade pip
          pip install "$ANSIBLE_VERSION"
          pip install -r "${TEST_ANSIBLE_SOLACE_COLLECTION_DIR}/requirements.txt"
          pip install -r tests/tests.requirements.txt

      - name: Test Installation
        if: env.DEBUG_FLAG == 'true'
        run: |
          pip show ansible
          ansible --version
          ansible-galaxy --version
          pip show xmltodict
          ls -la ${TEST_ANSIBLE_SOLACE_COLLECTION_DIR}

      - name: Build and install collection
        run: |
          cd ${TEST_ANSIBLE_SOLACE_COLLECTION_DIR}
          ansible-galaxy collection build .
          ansible-galaxy collection install *.gz

      - name: Test Collection Installation
        if: env.DEBUG_FLAG == 'true'
        run: |
          pwd
          ls -la
          ansible-galaxy collection list -vvv solace.pubsub_plus

      - name: Run Tests
        run: |
          export ANSIBLE_PYTHON_INTERPRETER=$(python -c "import sys; print(sys.executable)")
          export PROJECT_HOME="$GITHUB_WORKSPACE"
          export SOLACE_CLOUD_API_TOKEN_ALL_PERMISSIONS="${{ secrets.SOLACE_CLOUD_API_TOKEN_ALL_PERMISSIONS }}"
          export SOLACE_CLOUD_API_TOKEN_RESTRICTED_PERMISSIONS="${{ secrets.SOLACE_CLOUD_API_TOKEN_RESTRICTED_PERMISSIONS }}"
          export LOG_DIR="$GITHUB_WORKSPACE/${TEST_RUNNER_LOGS_DIR}"
          ./${TEST_TEST_RUNNER_SCRIPT}

      - name: Archive logs
        if: ${{ (failure() && !cancelled()) || (always() && github.event_name == 'workflow_dispatch') }}
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.TEST_TEST_RUNNER_LOGS_NAME }}
          path: ${{ github.workspace }}/${{ env.TEST_RUNNER_LOGS_DIR }}
          if-no-files-found: error

###
# The End.
