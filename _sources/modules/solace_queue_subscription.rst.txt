:github_url: https://github.com/solace-iot-team/ansible-solace-collection/tree/main/src/ansible_collections/solace/pubsub_plus/plugins/modules/solace_queue_subscription.py

.. _solace_queue_subscription_module:

solace_queue_subscription -- subscription on a queue
====================================================

Configure a Subscription object on a Queue. Allows addition, removal and configuration of Subscription objects on a queue.




Examples
--------

.. code-block:: yaml+jinja

   
   hosts: all
   gather_facts: no
   any_errors_fatal: true
   collections:
   - solace.pubsub_plus
   module_defaults:
       solace_queue:
           host: "{{ sempv2_host }}"
           port: "{{ sempv2_port }}"
           secure_connection: "{{ sempv2_is_secure_connection }}"
           username: "{{ sempv2_username }}"
           password: "{{ sempv2_password }}"
           timeout: "{{ sempv2_timeout }}"
           msg_vpn: "{{ vpn }}"
       solace_queue_subscription:
           host: "{{ sempv2_host }}"
           port: "{{ sempv2_port }}"
           secure_connection: "{{ sempv2_is_secure_connection }}"
           username: "{{ sempv2_username }}"
           password: "{{ sempv2_password }}"
           timeout: "{{ sempv2_timeout }}"
           msg_vpn: "{{ vpn }}"
   tasks:
   - name: create queue
     solace_queue:
       name: foo
       state: present

   - name: add subscription
     solace_queue_subscription:
       queue: foo
       topic: "foo/bar"
       state: present

   - name: remove subscription
     solace_queue_subscription:
       queue: foo
       topic: "foo/bar"
       state: absent



Notes
-----

.. note::
   - Module Sempv2 Config: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/config/index.html#/queue/createMsgVpnQueueSubscription
   - Sempv2 Config Reference: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/config/index.html#/
   - Sempv2 Monitor Reference: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/monitor/index.html#/
   - Sempv2 Action Reference: https://docs.solace.com/API-Developer-Online-Ref-Documentation/swagger-ui/action/index.html#/


See Also
--------

.. seealso::

   - :ref:`solace_queue_module`
   - :ref:`solace_get_queue_subscriptions_module`



Parameters
----------

host (optional)
  Hostname of Solace Broker.

  | **type**: str
  | **default**: localhost

msg_vpn (required)
  The message vpn.

  | **type**: str

name (required)
  The subscription topic. Maps to 'subscriptionTopic' in the API.

  | **type**: str
  | **aliases**: topic, subscription_topic

password (optional)
  Administrator password for Solace Broker.

  | **type**: str
  | **default**: admin

port (optional)
  Management port of Solace Broker.

  | **type**: int
  | **default**: 8080

queue (required)
  The queue. Maps to 'queueName' in the API.

  | **type**: str
  | **aliases**: queue_name

secure_connection (optional)
  If true, use https rather than http.

  | **type**: bool
  | **default**: False

sempv2_version (optional)
  The SEMP V2 API version of the broker. See :ref:`solace_get_facts <solace_get_facts_module>` for info on how to retrieve the version from the broker.

  Note: If the module requires it and not provided, the module will fetch it using the SEMP call 'about/api'.

  | **type**: str
  | **aliases**: semp_version

settings (optional)
  JSON dictionary of additional configuration, see Reference documentation.

  | **type**: dict

state (optional)
  Target state.

  | **type**: str
  | **default**: present
  | **choices**: present, absent

timeout (optional)
  Connection timeout in seconds for the http request.

  | **type**: int
  | **default**: 10

username (optional)
  Administrator username for Solace Broker.

  | **type**: str
  | **default**: admin

x_broker (optional)
  Custom HTTP header with the broker virtual router id, if using a SEMPv2 Proxy/agent infrastructure.

  | **type**: str





Return Values
-------------

response
  The response from the Solace Sempv2 request.

  | **returned**: success
  | **type**: dict

msg
  The response from the HTTP call in case of error.

  | **returned**: error
  | **type**: dict

rc
  Return code. rc=0 on success, rc=1 on error.

  | **returned**: always
  | **type**: int
  | **sample**:

  .. code-block:: json

     {
     "error": {
       "rc": 1
     },
     "success": {
       "rc": 0
     }
   }


