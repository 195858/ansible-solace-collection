.. _tips-tricks-content-logfile:

Setting & Retrieving Ansible-Solace Log Files
=============================================

When running Ansible Playbooks on a remote host, e.g. a 'bastion' or 'jump' host, we want to retrieve the log files generated by
the Ansible-Solace modules to our local host (our Ansible controller).

Consider the following inventory file:

- describes a bastion host
- describes a solace cloud service

.. code-block:: yaml

  ---
  all:
    hosts:
      my-solace-cloud-service:
        ansible_become: true
        ansible_host: {ip-address-of-bastion-host}
        ansible_python_interpreter: /usr/bin/python3
        ansible_user: {ansible-user-on-bastion-host}
        ansible_solace_log_base_path: /var/local
        broker_type: solace_cloud
        meta:
          datacenterId: aws-ca-central-1a
          sc_service_id: d9x91ert6e
          serviceClassDisplayedAttributes:
            Clients: '250'
            High Availability: HA Group
            Message Broker Tenancy: Dedicated
            Network Speed: 450 Mbps
            Network Usage: 50 GB per month
            Queues: '250'
            Storage: 25 GB
          serviceClassId: enterprise-250-nano
          serviceTypeId: enterprise
          service_name: asct_sc_bastion_2
        sempv2_host: {dns-or-ip-of-semp-service-of-broker-service}
        sempv2_is_secure_connection: true
        sempv2_password: {password}
        sempv2_port: 943
        sempv2_timeout: '60'
        sempv2_username: {username}
        solace_cloud_service_id: d9x91ert6e
        virtual_router: primary
        vpn: my-solace-cloud-service


We can use the following playbook to retrieve the log file generated by the Ansible-Solace modules:

.. code-block:: yaml

  hosts: all
  gather_facts: yes
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  module_defaults:
    # ... define additional module defaults
    solace_queue:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
  vars:
      # adding the inventory_hostname to log file.
      # resulting in: /var/local/my-solace-cloud-service.ansible-solace.log
      remote_ansible_solace_log_path: "{{ ansible_solace_log_base_path }}/{{ inventory_hostname }}.ansible-solace.log"
  environment:
    # set the environment for the playbook to enable logging
    ANSIBLE_SOLACE_ENABLE_LOGGING: true
    ANSIBLE_SOLACE_LOG_PATH: "{{ remote_ansible_solace_log_path }}"
  handlers:
    # define a handler to retrieve the log file to the ansible controller vm
  - name: Bring back the log file
    fetch:
      src: "{{ remote_ansible_solace_log_path }}"
      # variable set when calling the playbook. NOTE the '/' at the end!
      dest: "{{ ANSIBLE_SOLACE_LOCAL_LOG_BASE_PATH }}/"
      flat: yes
    listen: log-file-handler
    no_log: true
  tasks:
    # ensure the handler is notified at least once
  - name: Set up Handler
    debug:
      msg: setup handler
    changed_when: true
    notify: log-file-handler
    - name: Delete Log file
      file:
        path: "{{ remote_ansible_solace_log_path }}"
        state: absent

  - name: Block of ansible-solace tasks
    block:
    - name: Create Queue
      solace_queue:
        name: my-queue
        state: present
    always:
      # ensure handlers are called no matter if a task inside the block fails or not
      - meta: flush_handlers

... and call the playbook with the local log path:

.. code-block:: bash

  bastionVmPrivateKeyFile="bastionvm_key"
  ansibleSolaceLocalLogBasePath="my/path/to/my/log/files"
  mkdir -p $ansibleSolaceLocalLogBasePath
  ansible-playbook \
                -i inventory.yml \
                playbook.yml \
                --private-key $bastionVmPrivateKeyFile \
                --extra-vars "ANSIBLE_SOLACE_LOCAL_LOG_BASE_PATH=$ansibleSolaceLocalLogBasePath"

.. seealso::

  - :ref:`tips-tricks-content-bastion`
